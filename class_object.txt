class Employee:
    def __init__(self, name, salary, position):
        self.name = name
        self.salary = salary
        self.position = position

    def promote(self, new_position):
        """Updates the employee's position."""
        self.position = new_position

    def update_salary(self, new_salary):
        """Updates the employee's salary."""
        self.salary = new_salary

    def display_info(self):
        """Displays the employee's name, position, and salary."""
        print(f"Employee Name: {self.name}")
        print(f"Position: {self.position}")
        print(f"Salary: ${self.salary:.2f}")

# Example usage:
employee1 = Employee("John Doe", 50000, "Software Engineer")
employee1.display_info()

employee1.promote("Senior Software Engineer")
employee1.update_salary(80000)

print("\nAfter Promotion and Salary Update:")
employee1.display_info()


output:
Employee Name: John Doe
Position: Software Engineer
Salary: $50000.00

After Promotion and Salary Update:
Employee Name: John Doe
Position: Senior Software Engineer
Salary: $80000.00



class Student:
    def __init__(self, name, age):  # Fixed constructor name with double underscores
        self.name = name
        self.age = age
        self.marks = {}  # Dictionary to store subject-wise marks

    def add_marks(self, subject, mark):
        """Adds marks for a subject."""
        self.marks[subject] = mark

    def get_average_marks(self):
        """Returns the average marks for the student."""
        if not self.marks:
            return 0  # Return 0 if no marks are available
        return sum(self.marks.values()) / len(self.marks)

    def display_student_info(self):
        """Displays the student's name, age, and marks."""
        print(f"Student Name: {self.name}")
        print(f"Age: {self.age}")
        print("Marks:")
        for subject, mark in self.marks.items():
            print(f"  {subject}: {mark}")
        print(f"Average Marks: {self.get_average_marks():.2f}")

# Example usage:
student1 = Student("Alice", 20)
student1.add_marks("Math", 85)
student1.add_marks("Science", 90)
student1.add_marks("English", 78)

student1.display_student_info()


output:
Student Name: Alice
Age: 20
Marks:
  Math: 85
  Science: 90
  English: 78
Average Marks: 84.33