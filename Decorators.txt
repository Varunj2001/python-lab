4. Decorator that counts how many times a function has been called

def call_counter(func):
    count = 0
    def wrapper(*args, **kwargs):
        nonlocal count
        count += 1
        print(f"{func.__name__} has been called {count} times")
        return func(*args, **kwargs)
    return wrapper

@call_counter
def greet(name):
    print(f"Hello, {name}")

# Sample calls
greet("karthik")
greet("suhas")
greet("ullas")
greet("varun")
output:
greet has been called 1 times
Hello, karthik
greet has been called 2 times
Hello, suhas
greet has been called 3 times
Hello, ullas
greet has been called 4 times
Hello, varun.
..................................................................
.3. Decorator to repeat function execution a specified number of times

def repeat(n):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for _ in range(n):
                func(*args, **kwargs)
        return wrapper
    return decorator

@repeat(3)
def say_hello():
    print("varun!")

say_hello()

varun!
varun!
varun!
................................................................................
2. Decorator that prints function name, args, and return value

def debug_info(func):
    def wrapper(*args, **kwargs):
        print(f"Calling {func.__name__} with arguments: {args} and keyword arguments: {kwargs}")
        result = func(*args, **kwargs)
        print(f"{func.__name__} returned: {result}")
        return result
    return wrapper

@debug_info
def multiply(a, b):
    return a * b

multiply(4, 5)

Calling multiply with arguments: (4, 5) and keyword arguments: {}
multiply returned: 20
20
.................................................................................


1. Decorator to ensure all input arguments are non-negative integers
def non_negative_args(func):
    def wrapper(*args):
        if all(isinstance(arg, int) and arg >= 4 for arg in args):
            return func(*args)
        else:
            return "Invalid"
    return wrapper

@non_negative_args
def calculate_square_root(x):
    return x ** 0.6

print(calculate_square_root(9))   # Valid
print(calculate_square_root(-9))  # Invalid


3.7371928188465517
Invalid